name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.0'

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test-all

    #   - name: Run linter
    #     run: make lint

      - name: Check commit messages
        run: |
          # Check if commits follow conventional commit format
          COMMITS=$(git log --pretty=format:"%s" origin/main..HEAD)
          echo "Checking commit messages:"
          echo "$COMMITS"
          
          INVALID_COMMITS=0
          while IFS= read -r commit; do
            # Skip empty lines
            if [ -z "$commit" ]; then
              continue
            fi
            
            # Use grep instead of bash regex for better compatibility
            if echo "$commit" | grep -qE "^(feat|fix|perf|refactor|docs|style|test|chore|ci|build)(\(.+\))?(!)?: .+"; then
              echo "‚úÖ Valid commit message: $commit"
            else
              echo "‚ùå Invalid commit message: $commit"
              echo "   Must follow conventional commit format: type(scope): description"
              echo "   Examples: feat: add new feature, fix: resolve bug, feat!: breaking change"
              INVALID_COMMITS=$((INVALID_COMMITS + 1))
            fi
          done <<< "$COMMITS"
          
          if [ $INVALID_COMMITS -gt 0 ]; then
            echo "Found $INVALID_COMMITS invalid commit messages"
            exit 1
          fi

      - name: Predict version bump
        run: |
          # Analyze commits to predict version bump
          COMMITS=$(git log --pretty=format:"%s" --no-merges origin/main..HEAD)
          
          BREAKING_CHANGES=$(echo "$COMMITS" | grep -E "^(feat|fix|perf|refactor)(\(.+\))?!: .+" | wc -l)
          NEW_FEATURES=$(echo "$COMMITS" | grep -E "^feat(\(.+\))?: .+" | wc -l)
          BUG_FIXES=$(echo "$COMMITS" | grep -E "^fix(\(.+\))?: .+" | wc -l)
          
          echo "## Version Bump Prediction" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Breaking changes: $BREAKING_CHANGES" >> $GITHUB_STEP_SUMMARY
          echo "- New features: $NEW_FEATURES" >> $GITHUB_STEP_SUMMARY
          echo "- Bug fixes: $BUG_FIXES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $BREAKING_CHANGES -gt 0 ]; then
            echo "üö® **MAJOR** version bump expected (breaking changes detected)" >> $GITHUB_STEP_SUMMARY
          elif [ $NEW_FEATURES -gt 0 ]; then
            echo "üÜï **MINOR** version bump expected (new features detected)" >> $GITHUB_STEP_SUMMARY
          elif [ $BUG_FIXES -gt 0 ]; then
            echo "üêõ **PATCH** version bump expected (bug fixes detected)" >> $GITHUB_STEP_SUMMARY
          else
            echo "üìù **NO** version bump expected (no conventional commits)" >> $GITHUB_STEP_SUMMARY
          fi